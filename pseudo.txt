Read file
    import resources
    make File from target file path
    print output to confirm reading

Use first line to determine # of processes and resource types
    Read file
    save first value as N (num processes)
    save second value as M (num resource types)

Use second line to determine # of units of each system resource
    for i < M (num resource types)
    add values to array which represents total respective resource

Use N as the "length" of the allocation matrix (next # set)
Use M as the "width" of the allocation matrix
    for i < N
        for j < M
            add values to allocation matrix

Use N as the "length" of the allocation matrix (next # set)
Use M as the "width" of the allocation matrix
    for i < N
        for j < M
            add values to max/claim matrix

Calculate need matrix
    subtract allocation values from claim values

Add available array when populating allocation array
    if array has not been populated
        use j (col index) to populate it
    overwrite existing positions by continually subtracting
    resources as the amount allocated increases

Implement algorithm using existing arrays
    start with claim
        for i, j is claim <= available?
        if yes
            if we are at the last col and current p is not in seq
                add to seq
                change finished[i] to true
                releaseResources()
            continue (increment j to get next col)
        if no, break (increment i)


    releaseResources(int[] allocation, int[] available)

        for each column in allocation/available
            add the allocation amount to available value

Get multiple safe sequences
    try using a temp arraylist
        3 arraylists: safe, safe2, tempSafe

        use tempSafe in loop, if temp is same size as num processes
            if safe is empty
                copy temp into safe
                clear temp so the loop runs again
            if safe is full
                copy temp into safe2
                clear temp
                exit loop

                how do exit if there are no more safe sequences??

                if we have gone through the list multiple times and the
                temp size is still the same we know that we have no more safe
                sequences

                try a counter which increments everytime we are at i = 0
                    if i = 0
                    zeroCounter++

                    if temp.size = num processes
                        if safe is empty copy it there and reset zeroCounter
                        else copy it into safe2, reset zeroCounter, clear temp,exit

                    if zeroCounter == 5
                        break

                    if safe == full
                        print one safe seq is safe
                    else
                        print there are no safe sequences
                        break??

                    if safe2 == full
                        print the second safe seq is safe 2
                    else
                        print there are less than two safe sequences
                        (this should actlly not execute, combine with above
                        logic block to cover all variations of full safe/safe2)


