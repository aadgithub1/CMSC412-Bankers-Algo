Read file
    import resources
    make File from target file path
    print output to confirm reading

Use first line to determine # of processes and resource types
    Read file
    save first value as N (num processes)
    save second value as M (num resource types)

Use second line to determine # of units of each system resource
    for i < M (num resource types)
    add values to array which represents total respective resource

Use N as the "length" of the allocation matrix (next # set)
Use M as the "width" of the allocation matrix
    for i < N
        for j < M
            add values to allocation matrix

Use N as the "length" of the allocation matrix (next # set)
Use M as the "width" of the allocation matrix
    for i < N
        for j < M
            add values to max/claim matrix

Calculate need matrix
    subtract allocation values from claim values

Add available array when populating allocation array
    if array has not been populated
        use j (col index) to populate it
    overwrite existing positions by continually subtracting
    resources as the amount allocated increases

Implement algorithm using existing arrays
    start with claim
        for i, j is claim <= available?
        if yes
            if we are at the last col and current p is not in seq
                add to seq
                releaseResources()
            continue (increment j to get next col)
        if no, break (increment i)


    releaseResources(int[] allocation, int[] available)

        for each column in allocation/available
            add the allocation amount to available value

